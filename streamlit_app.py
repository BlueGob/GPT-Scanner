import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir))

import streamlit as st
from gptzero import ZeroAccount, ZeroVerdict, ZeroVerdictData
from originality import OriginalityAccount, OriginalityVerdict
import logging

logging.basicConfig(level=logging.INFO)

def get_zero_scan(content: str) -> ZeroVerdictData:
    try:
        acc = None #ZeroAccount.get_from_local()
        if not acc:
            acc = ZeroAccount.create()
        
        res = ZeroVerdict.get(content, acc)
        return res

    except Exception as e:
        # Return error message if an exception occurs
        return (
            f'An error occurred: {e}. '
        )

def get_originality_scan(content: str):

    try:
        estimated_credits_cost = -(sum(1 for c in content if c in ' \t\n') // -50) # estimated if ai+plagiat (the negatives make a ciel)
        account = OriginalityAccount.get_from_local(estimated_credits_cost)
        if not account:
            account = ZeroAccount.create()
        res = OriginalityVerdict.get(content, account)
        return res

    except Exception as e:
        # Return error message if an exception occurs
        return (
            f'An error occurred: {e}. '
        )

# Set page configuration and add header
st.set_page_config(
    page_title="GPT Zero scan",
    initial_sidebar_state="expanded",
    layout="wide",
    page_icon="🔍",
    # menu_items={
    #     'Get Help': 'https://github.com/xtekky/gpt4free/blob/main/README.md',
    #     'Report a bug': "https://github.com/xtekky/gpt4free/issues",
    #     'About': "### gptfree GUI",
    # },
)
st.header('GPT Zero scan')

# Add text area for user input and button to get answer
question_text_area = st.text_area('Paste content to scan :')

if st.button('🔍 Scan'):
    zverdict = get_zero_scan(question_text_area)
    # escaped = answer.encode('utf-8').decode('unicode-escape')
    # Display answer
    with st.container():
        if zverdict.completely_generated_prob > 0.9 :
            st.header("Your text seems to be completely generated by AI")
        elif zverdict.average_generated_prob > 0.5 :
            st.header("Parts of your text seem to be generated by AI")
        else: st.header("Your text seems to be written by a human")
        st.write(f"Your text's burstiness score is: {zverdict.overall_burstiness}")
        st.caption(f"the burstiness is a measurement of the variation of the randomness of the text")
        st.caption(f"burstiness over 90 is often regarded as human")

# Hide Streamlit footer
hide_streamlit_style = """
            <style>
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)
